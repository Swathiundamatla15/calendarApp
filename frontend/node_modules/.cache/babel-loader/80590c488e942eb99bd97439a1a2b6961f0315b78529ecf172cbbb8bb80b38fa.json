{"ast":null,"code":"const API_URL = 'http://localhost:5000/api'; // Ensure this URL is correct\n\n// Fetch communications from the server\nexport const fetchCommunications = async () => {\n  try {\n    const response = await fetch(`${API_URL}/communications`);\n    if (!response.ok) {\n      const errorMessage = `Failed to fetch communications: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to fetch communications due to network error');\n  }\n};\n\n// Fetch companies from the server\nexport const fetchCompanies = async () => {\n  try {\n    const response = await fetch(`${API_URL}/companies`);\n    if (!response.ok) {\n      const errorMessage = `Failed to fetch companies: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to fetch companies due to network error');\n  }\n};\n\n// Fetch a single company by ID\nexport const fetchCompanyById = async id => {\n  try {\n    const response = await fetch(`${API_URL}/companies/${id}`);\n    if (!response.ok) {\n      const errorMessage = `Failed to fetch company: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to fetch company due to network error');\n  }\n};\n\n// Add a new company\nexport const addCompany = async companyData => {\n  try {\n    const response = await fetch(`${API_URL}/companies`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      const errorMessage = `Failed to add company: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to add company due to network error');\n  }\n};\n\n// Update an existing company\nexport const updateCompany = async (companyId, companyData) => {\n  try {\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      const errorMessage = `Failed to update company: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to update company due to network error');\n  }\n};\n\n// Delete a company\nexport const deleteCompany = async companyId => {\n  try {\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const errorMessage = `Failed to delete company: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to delete company due to network error');\n  }\n};\n\n// Fetch communication methods from the server\nexport const fetchCommunicationMethods = async () => {\n  try {\n    const response = await fetch(`${API_URL}/communicationMethods`);\n    if (!response.ok) {\n      const errorMessage = `Failed to fetch communication methods: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to fetch communication methods due to network error');\n  }\n};\n\n// Add a new communication method\nexport const addCommunicationMethod = async methodData => {\n  try {\n    const response = await fetch(`${API_URL}/communicationMethods`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(methodData)\n    });\n    if (!response.ok) {\n      const errorMessage = `Failed to add communication method: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to add communication method due to network error');\n  }\n};\n\n// Update an existing communication method\nexport const updateCommunicationMethod = async (methodId, methodData) => {\n  try {\n    const response = await fetch(`${API_URL}/communicationMethods/${methodId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(methodData)\n    });\n    if (!response.ok) {\n      const errorMessage = `Failed to update communication method: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to update communication method due to network error');\n  }\n};\n\n// Delete a communication method\nexport const deleteCommunicationMethod = async methodId => {\n  try {\n    const response = await fetch(`${API_URL}/communicationMethods/${methodId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      const errorMessage = `Failed to delete communication method: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to delete communication method due to network error');\n  }\n};","map":{"version":3,"names":["API_URL","fetchCommunications","response","fetch","ok","errorMessage","status","statusText","console","error","Error","json","fetchCompanies","fetchCompanyById","id","addCompany","companyData","method","headers","body","JSON","stringify","updateCompany","companyId","deleteCompany","fetchCommunicationMethods","addCommunicationMethod","methodData","updateCommunicationMethod","methodId","deleteCommunicationMethod"],"sources":["C:/Users/Subha/Desktop/recCal/calendar-app/frontend/src/utils/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api'; // Ensure this URL is correct\n\n// Fetch communications from the server\nexport const fetchCommunications = async () => {\n    try {\n        const response = await fetch(`${API_URL}/communications`);\n        if (!response.ok) {\n            const errorMessage = `Failed to fetch communications: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to fetch communications due to network error');\n    }\n};\n\n// Fetch companies from the server\nexport const fetchCompanies = async () => {\n    try {\n        const response = await fetch(`${API_URL}/companies`);\n        if (!response.ok) {\n            const errorMessage = `Failed to fetch companies: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to fetch companies due to network error');\n    }\n};\n\n// Fetch a single company by ID\nexport const fetchCompanyById = async (id) => {\n    try {\n        const response = await fetch(`${API_URL}/companies/${id}`);\n        if (!response.ok) {\n            const errorMessage = `Failed to fetch company: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to fetch company due to network error');\n    }\n};\n\n// Add a new company\nexport const addCompany = async (companyData) => {\n    try {\n        const response = await fetch(`${API_URL}/companies`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(companyData),\n        });\n        if (!response.ok) {\n            const errorMessage = `Failed to add company: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to add company due to network error');\n    }\n};\n\n// Update an existing company\nexport const updateCompany = async (companyId, companyData) => {\n    try {\n        const response = await fetch(`${API_URL}/companies/${companyId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(companyData),\n        });\n        if (!response.ok) {\n            const errorMessage = `Failed to update company: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to update company due to network error');\n    }\n};\n\n// Delete a company\nexport const deleteCompany = async (companyId) => {\n    try {\n        const response = await fetch(`${API_URL}/companies/${companyId}`, {\n            method: 'DELETE',\n        });\n        if (!response.ok) {\n            const errorMessage = `Failed to delete company: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to delete company due to network error');\n    }\n};\n\n// Fetch communication methods from the server\nexport const fetchCommunicationMethods = async () => {\n    try {\n        const response = await fetch(`${API_URL}/communicationMethods`);\n        if (!response.ok) {\n            const errorMessage = `Failed to fetch communication methods: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to fetch communication methods due to network error');\n    }\n};\n\n// Add a new communication method\nexport const addCommunicationMethod = async (methodData) => {\n    try {\n        const response = await fetch(`${API_URL}/communicationMethods`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(methodData),\n        });\n        if (!response.ok) {\n            const errorMessage = `Failed to add communication method: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to add communication method due to network error');\n    }\n};\n\n// Update an existing communication method\nexport const updateCommunicationMethod = async (methodId, methodData) => {\n    try {\n        const response = await fetch(`${API_URL}/communicationMethods/${methodId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(methodData),\n        });\n        if (!response.ok) {\n            const errorMessage = `Failed to update communication method: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to update communication method due to network error');\n    }\n};\n\n// Delete a communication method\nexport const deleteCommunicationMethod = async (methodId) => {\n    try {\n        const response = await fetch(`${API_URL}/communicationMethods/${methodId}`, {\n            method: 'DELETE',\n        });\n        if (!response.ok) {\n            const errorMessage = `Failed to delete communication method: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to delete communication method due to network error');\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}