{"ast":null,"code":"// filepath: /C:/Users/Subha/Desktop/recCal/calendar-app/frontend/src/utils/api.js\nconst API_URL = 'http://localhost:5000/api'; // Update with your backend URL\n\nexport const fetchCompanies = async () => {\n  const response = await fetch(`${API_URL}/companies`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch companies');\n  }\n  return response.json();\n};\nexport const addCompany = async companyData => {\n  const response = await fetch(`${API_URL}/companies`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(companyData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to add company');\n  }\n  return response.json();\n};\nexport const updateCompany = async (companyId, companyData) => {\n  const response = await fetch(`${API_URL}/companies/${companyId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(companyData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update company');\n  }\n  return response.json();\n};\nexport const deleteCompany = async companyId => {\n  const response = await fetch(`${API_URL}/companies/${companyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete company');\n  }\n  return response.json();\n};\nexport const logCommunication = async communicationData => {\n  const response = await fetch(`${API_URL}/communications`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(communicationData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to log communication');\n  }\n  return response.json();\n};\nexport const fetchCommunications = async () => {\n  const response = await fetch(`${API_URL}/communications`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch communications');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","fetchCompanies","response","fetch","ok","Error","json","addCompany","companyData","method","headers","body","JSON","stringify","updateCompany","companyId","deleteCompany","logCommunication","communicationData","fetchCommunications"],"sources":["C:/Users/Subha/Desktop/recCal/calendar-app/frontend/src/utils/api.js"],"sourcesContent":["// filepath: /C:/Users/Subha/Desktop/recCal/calendar-app/frontend/src/utils/api.js\nconst API_URL = 'http://localhost:5000/api'; // Update with your backend URL\n\nexport const fetchCompanies = async () => {\n    const response = await fetch(`${API_URL}/companies`);\n    if (!response.ok) {\n        throw new Error('Failed to fetch companies');\n    }\n    return response.json();\n};\n\nexport const addCompany = async (companyData) => {\n    const response = await fetch(`${API_URL}/companies`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to add company');\n    }\n    return response.json();\n};\n\nexport const updateCompany = async (companyId, companyData) => {\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to update company');\n    }\n    return response.json();\n};\n\nexport const deleteCompany = async (companyId) => {\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\n        method: 'DELETE',\n    });\n    if (!response.ok) {\n        throw new Error('Failed to delete company');\n    }\n    return response.json();\n};\n\nexport const logCommunication = async (communicationData) => {\n    const response = await fetch(`${API_URL}/communications`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(communicationData),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to log communication');\n    }\n    return response.json();\n};\n\nexport const fetchCommunications = async () => {\n    const response = await fetch(`${API_URL}/communications`);\n    if (!response.ok) {\n        throw new Error('Failed to fetch communications');\n    }\n    return response.json();\n};"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,YAAY,CAAC;EACpD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAChD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC7C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,YAAY,EAAE;IACjDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMQ,aAAa,GAAG,MAAAA,CAAOC,SAAS,EAAEP,WAAW,KAAK;EAC3D,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,cAAce,SAAS,EAAE,EAAE;IAC9DN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMU,aAAa,GAAG,MAAOD,SAAS,IAAK;EAC9C,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,cAAce,SAAS,EAAE,EAAE;IAC9DN,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAG,MAAOC,iBAAiB,IAAK;EACzD,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,iBAAiB,EAAE;IACtDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,iBAAiB;EAC1C,CAAC,CAAC;EACF,IAAI,CAAChB,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMa,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,iBAAiB,CAAC;EACzD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACrD;EACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}