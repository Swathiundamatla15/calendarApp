{"ast":null,"code":"const API_URL = 'http://localhost:5000/api'; // Update with your backend URL\n\n// Fetch communications from the server\nexport const fetchCommunications = async () => {\n  try {\n    const response = await fetch(`${API_URL}/communications`);\n    if (!response.ok) {\n      const errorMessage = `Failed to fetch communications: ${response.status} ${response.statusText}`;\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Network error:', error);\n    throw new Error('Failed to fetch communications due to network error');\n  }\n};\n\n// Add a new company\nexport const addCompany = async companyData => {\n  const response = await fetch(`${API_URL}/companies`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(companyData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to add company');\n  }\n  return response.json();\n};\n\n// Update an existing company\nexport const updateCompany = async (companyId, companyData) => {\n  const response = await fetch(`${API_URL}/companies/${companyId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(companyData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update company');\n  }\n  return response.json();\n};\n\n// Delete a company\nexport const deleteCompany = async companyId => {\n  const response = await fetch(`${API_URL}/companies/${companyId}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete company');\n  }\n  return response.json();\n};\n\n// Log a new communication\nexport const logCommunication = async communicationData => {\n  const response = await fetch(`${API_URL}/communications`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(communicationData)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to log communication');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","fetchCommunications","response","fetch","ok","errorMessage","status","statusText","console","error","Error","json","addCompany","companyData","method","headers","body","JSON","stringify","updateCompany","companyId","deleteCompany","logCommunication","communicationData"],"sources":["C:/Users/Subha/Desktop/recCal/calendar-app/frontend/src/utils/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api'; // Update with your backend URL\n\n// Fetch communications from the server\nexport const fetchCommunications = async () => {\n    try {\n        const response = await fetch(`${API_URL}/communications`);\n        if (!response.ok) {\n            const errorMessage = `Failed to fetch communications: ${response.status} ${response.statusText}`;\n            console.error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Network error:', error);\n        throw new Error('Failed to fetch communications due to network error');\n    }\n};\n\n// Add a new company\nexport const addCompany = async (companyData) => {\n    const response = await fetch(`${API_URL}/companies`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to add company');\n    }\n    return response.json();\n};\n\n// Update an existing company\nexport const updateCompany = async (companyId, companyData) => {\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to update company');\n    }\n    return response.json();\n};\n\n// Delete a company\nexport const deleteCompany = async (companyId) => {\n    const response = await fetch(`${API_URL}/companies/${companyId}`, {\n        method: 'DELETE',\n    });\n    if (!response.ok) {\n        throw new Error('Failed to delete company');\n    }\n    return response.json();\n};\n\n// Log a new communication\nexport const logCommunication = async (communicationData) => {\n    const response = await fetch(`${API_URL}/communications`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(communicationData),\n    });\n    if (!response.ok) {\n        throw new Error('Failed to log communication');\n    }\n    return response.json();\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,iBAAiB,CAAC;IACzD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACd,MAAMC,YAAY,GAAG,mCAAmCH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE;MAChGC,OAAO,CAACC,KAAK,CAACJ,YAAY,CAAC;MAC3B,MAAM,IAAIK,KAAK,CAACL,YAAY,CAAC;IACjC;IACA,OAAO,MAAMH,QAAQ,CAACS,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;EAC1E;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC7C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,YAAY,EAAE;IACjDc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIM,KAAK,CAAC,uBAAuB,CAAC;EAC5C;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMQ,aAAa,GAAG,MAAAA,CAAOC,SAAS,EAAEP,WAAW,KAAK;EAC3D,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,cAAcoB,SAAS,EAAE,EAAE;IAC9DN,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;EACpC,CAAC,CAAC;EACF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIM,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMU,aAAa,GAAG,MAAOD,SAAS,IAAK;EAC9C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,cAAcoB,SAAS,EAAE,EAAE;IAC9DN,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIM,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMW,gBAAgB,GAAG,MAAOC,iBAAiB,IAAK;EACzD,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,iBAAiB,EAAE;IACtDc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACK,iBAAiB;EAC1C,CAAC,CAAC;EACF,IAAI,CAACrB,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIM,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}